name: 01_HelloWorld_Tasks

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  unitTestProjects: '**/*Unit.Tests.csproj'
  artifactName: 'HelloWorldWeb'

steps:
- task: BuildVersioning@0
  displayName: 'Build Versioning using GitVersion'
  inputs:
    versionSource: 'gitversion'
    doInstallGitVersion: true
    GitVersionInstallerSource: 'choco'
    GitVersionInstallerVersion: '5.0.1'
    doUseLatestGitVersionInstallerVersion: false
    paramAssemblyVersion: '7'
    paramAssemblyFileVersion: '7'
    paramAssemblyInformationalVersion: '6'
    paramOverwriteFourthDigitWithBuildCounter: false
    paramVersionCode: '2'
    doAssemblyInfoAppendSuffix: false
    doConvertAssemblyInfoToLowerCase: true
    buildNumberVersionFormat: '3'
    buildNumberAction: 'replace'
    doReplaceAssemblyInfo: false
    doReplaceNuspec: false
    doReplaceNpm: false
    doReplaceDotNetCore: true
    filePatternDotNetCore: '**\*.csproj'
    paramDotNetCoreVersionType: '3'
    doReplaceAndroid: false
    doReplaceiOS: false
    doReplaceCustom: false
    doShowWarningsForUnmatchedRegex: true
    excludeFilePattern: |
      !**/bin/**
      !**/obj/**
      !**/node_modules/**
      !**/packages/**
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'
  inputs:
    packageType: 'sdk'
    version: '3.1.x'
- task: DotNetCoreCLI@2
  displayName: 'Build in Configuration $(buildConfiguration)'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'
- task: DotNetCoreCLI@2
  displayName: 'Run unit tests'
  inputs:
    command: test
    projects: $(unitTestProjects)
    arguments: '--configuration $(buildConfiguration)  --collect "Code coverage" --logger trx'
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/*.trx'
- task: DotNetCoreCLI@2
  displayName: 'Publish web application'
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True
- task: PublishBuildArtifacts@1
  displayName: 'Publish build artifact'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: $(artifactName)